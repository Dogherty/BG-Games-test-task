3) Тема "Числа-близнецы"

Задача: Вам на вход дается два числа start_range и end_range. Найдите все числа-близнецы для заданного диапазона.

Числа-близнецы в математике - это пары простых чисел, разность между которыми равна двум. Формально, два простых числа \rho и \rho+2 называются числами-близнецами, потому что их разность (\rho+2) - \rho равна 2. Например, пара (3, 5), (11, 13), (17, 19) - это числа-близнецы.

Для решения данной задачи мы можем реализовать следующий алгоритм:

<imprecise>
Создаем две функции is_prime - для проверки числа на простоту, и find_twin_primes - для нахождения числа-близнец.

Функция is_prime

Входные данные: Число n.

- Если n меньше или равно 1, вернуть False, так как 1 и все отрицательные числа не являются простыми.
- Итерируемся от 2 до квадратного корня из n (включительно).
- Если n делится на текущее значение i без остатка, то n не является простым числом, и мы возвращаем False.
- Если цикл завершился, и ни одно из значений i не привело к делению n без остатка, тогда n является простым числом, и мы возвращаем True.

Функция find_twin_primes

- Входные данные: Два целых числа start и end.
- Инициализируем пустой список twin_primes для хранения пар простых чисел-близнецов.
- Итерируемся от start до end - 1 (включительно).
- Проверяем, является ли текущее число i простым и i + 2 тоже простым, используя функцию is_prime.
- Если оба числа простые, добавляем пару (i, i + 2) в список twin_primes.
- По завершении итераций возвращаем список twin_primes.

</imprecise>

Код задания: 

<imprecise>
<code>
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def find_twin_primes(start, end):
    twin_primes = []
    for i in range(start, end - 1):
        if is_prime(i) and is_prime(i + 2):
            twin_primes.append((i, i + 2))
    return twin_primes

start_range = 10
end_range = 50

result = find_twin_primes(start_range, end_range)
print(f"Простые числа-близнецы в диапазоне от {start_range} до {end_range}:")
for twin_prime_pair in result:
    print(twin_prime_pair)
</code>
</imprecise>
